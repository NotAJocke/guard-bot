generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Guild {
  modelId           String         @id @default(uuid())
  id                String         @unique
  members           Member[]
  raidmode          Boolean        @default(false)
  bans              Ban[]
  warns             Warn[]
  ticketConfig      TicketsConfig?
  verifiedRoleId    String?
  tickets           Ticket[]
  autoReactChannels AutoReact[]
}

model TicketsConfig {
  modelId          String   @id @default(uuid())
  guild            Guild    @relation(fields: [guildId], references: [id])
  guildId          String   @unique
  count            Int      @default(0000)
  tickets          Ticket[]
  modRoleId        String
  ticketCategoryId String
}

model AutoReact {
  modelId   String   @id @default(uuid())
  guild     Guild    @relation(fields: [guildId], references: [id])
  guildId   String
  channelId String   @unique
  emojis    String[]

  @@unique(fields: [guildId, channelId], name: "guildChannel")
}

model Member {
  modelId      String  @id @default(uuid())
  id           String  @unique
  guild        Guild   @relation(fields: [guildId], references: [id])
  guildId      String
  internalNote String?
  warns        Warn[]
  ban          Ban?
}

model Warn {
  modelId   String @id @default(uuid())
  reason    String
  moderator String
  date      BigInt
  member    Member @relation(fields: [memberId], references: [id])
  memberId  String
  guild     Guild  @relation(fields: [guildId], references: [id])
  guildId   String
}

model Ban {
  modelId   String   @id @default(uuid())
  reason    String
  moderator String
  until     BigInt?
  member    Member   @relation(fields: [memberId], references: [id])
  memberId  String   @unique
  guild     Guild    @relation(fields: [guildId], references: [id])
  guildId   String
  data      String[]
}

model Ticket {
  modelId         String         @id @default(uuid())
  channelId       String         @unique
  ownerId         String
  ticketsConfig   TicketsConfig? @relation(fields: [ticketsConfigId], references: [modelId])
  ticketsConfigId String?
  guild           Guild          @relation(fields: [guildId], references: [id])
  guildId         String
  opened          Boolean        @default(true)
}
